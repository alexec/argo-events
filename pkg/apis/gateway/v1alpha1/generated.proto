/*
Copyright 2020 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_events.pkg.apis.gateway.v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option (gogoproto.marshaler_all) = true;
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option go_package = "v1alpha1";

// EventSourceRef holds information about the EventSourceRef custom resource
message EventSourceRef {
  // Name of the event source
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Namespace of the event source
  // Default value is the namespace where referencing gateway is deployed
  // +optional
  optional string namespace = 2 [(gogoproto.customname) = "Namespace", (gogoproto.nullable) = false];
}

// Gateway is the definition of a gateway resource
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message Gateway {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional GatewayStatus status = 2 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];

  optional GatewaySpec spec = 3 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];
}

// GatewayList is the list of Gateway resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message GatewayList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  // +listType=items
  repeated Gateway items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// GatewayResource holds the metadata about the gateway resources
message GatewayResource {
  // Metadata of the deployment for the gateway
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta deployment = 1 [(gogoproto.customname) = "Deployment"];

  // Metadata of the service for the gateway
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta service = 2 [(gogoproto.customname) = "Service"];
}

// GatewaySpec represents gateway specifications
message GatewaySpec {
  // Template is the pod specification for the gateway
  // +optional
  optional Template template = 1 [(gogoproto.customname) = "Template", (gogoproto.nullable) = false];

  // EventSourceRef refers to event-source that stores event source configurations for the gateway
  optional EventSourceRef eventSourceRef = 2 [(gogoproto.customname) = "EventSourceRef"];

  // Type is the type of gateway. Used as metadata.
  optional string type = 3 [(gogoproto.casttype) = "github.com/argoproj/argo-events/pkg/apis/common.EventSourceType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  // Service is the specifications of the service to expose the gateway
  // +optional
  optional Service service = 4 [(gogoproto.customname) = "Service"];

  // Subscribers holds the contexts of the subscribers/sinks to send events to.
  // +listType=subscribers
  // +optional
  optional Subscribers subscribers = 5 [(gogoproto.customname) = "Subscribers"];

  // Port on which the gateway event source processor is running on.
  optional string processorPort = 6 [(gogoproto.customname) = "ProcessorPort", (gogoproto.nullable) = false];

  // Replica is the gateway deployment replicas
  optional int64 replica = 9 [(gogoproto.customname) = "Replica", (gogoproto.nullable) = false];
}

// GatewayStatus contains information about the status of a gateway.
message GatewayStatus {
  // Phase is the high-level summary of the gateway
  optional string phase = 1 [(gogoproto.casttype) = "NodePhase", (gogoproto.customname) = "Phase", (gogoproto.nullable) = false];

  // StartedAt is the time at which this gateway was initiated
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 2 [(gogoproto.customname) = "StartedAt", (gogoproto.nullable) = false];

  // Message is a human readable string indicating details about a gateway in its phase
  optional string message = 4 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];

  // Nodes is a mapping between a node ID and the node's status
  // it records the states for the configurations of gateway.
  map<string, NodeStatus> nodes = 5 [(gogoproto.customname) = "Nodes", (gogoproto.nullable) = false];

  // Resources refers to the metadata about the gateway resources
  optional GatewayResource resources = 6 [(gogoproto.customname) = "Resources"];
}

// Metadata holds the annotations and labels of a gateway pod
message Metadata {
  map<string, string> annotations = 1 [(gogoproto.customname) = "Annotations", (gogoproto.nullable) = false];

  map<string, string> labels = 2 [(gogoproto.customname) = "Labels", (gogoproto.nullable) = false];
}

// NATSSubscriber holds the context of subscriber over NATS.
message NATSSubscriber {
  // ServerURL refers to the NATS server URL.
  optional string serverURL = 1 [(gogoproto.customname) = "ServerURL", (gogoproto.nullable) = false];

  // Subject refers to the NATS subject name.
  optional string subject = 2 [(gogoproto.customname) = "Subject", (gogoproto.nullable) = false];

  // Name of the subscription. Must be unique.
  optional string name = 3 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];
}

// NodeStatus describes the status for an individual node in the gateway configurations.
// A single node can represent one configuration.
message NodeStatus {
  // ID is a unique identifier of a node within a sensor
  // It is a hash of the node name
  optional string id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];

  // Name is a unique name in the node tree used to generate the node ID
  optional string name = 3 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // DisplayName is the human readable representation of the node
  optional string displayName = 5 [(gogoproto.customname) = "DisplayName", (gogoproto.nullable) = false];

  // Phase of the node
  optional string phase = 6 [(gogoproto.casttype) = "NodePhase", (gogoproto.customname) = "Phase", (gogoproto.nullable) = false];

  // StartedAt is the time at which this node started
  // +k8s:openapi-gen=false
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime startedAt = 7 [(gogoproto.customname) = "StartedAt", (gogoproto.nullable) = false];

  // Message store data or something to save for configuration
  optional string message = 8 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];

  // UpdateTime is the time when node(gateway configuration) was updated
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime updateTime = 9 [(gogoproto.customname) = "UpdateTime", (gogoproto.nullable) = false];
}

// Service holds the service information gateway exposes
message Service {
  // The list of ports that are exposed by this ClusterIP service.
  // +patchMergeKey=port
  // +patchStrategy=merge
  // +listType=map
  // +listMapKey=port
  // +listMapKey=protocol
  repeated k8s.io.api.core.v1.ServicePort ports = 1 [(gogoproto.customname) = "Ports", (gogoproto.nullable) = false];

  // clusterIP is the IP address of the service and is usually assigned
  // randomly by the master. If an address is specified manually and is not in
  // use by others, it will be allocated to the service; otherwise, creation
  // of the service will fail. This field can not be changed through updates.
  // Valid values are "None", empty string (""), or a valid IP address. "None"
  // can be specified for headless services when proxying is not required.
  // More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  // +optional
  optional string clusterIP = 2 [(gogoproto.customname) = "ClusterIP", (gogoproto.nullable) = false];

  // Spec holds the gateway service spec.
  // DEPRECATED: Use Ports to declare the ports to be exposed.
  optional k8s.io.api.core.v1.ServiceSpec spec = 3 [(gogoproto.customname) = "Spec"];
}

message Subscribers {
  // HTTP subscribers are HTTP endpoints to send events to.
  // +listType=string
  // +optional
  repeated string http = 1 [(gogoproto.customname) = "HTTP"];

  // NATS refers to the subscribers over NATS protocol.
  // +listType=NATSSubscriber
  // +optional
  repeated NATSSubscriber nats = 2 [(gogoproto.customname) = "NATS", (gogoproto.nullable) = false];
}

// Template holds the information of a Gateway deployment template
message Template {
  // Metdata sets the pods's metadata, i.e. annotations and labels
  optional Metadata metadata = 1 [(gogoproto.customname) = "Metadata", (gogoproto.nullable) = false];

  // ServiceAccountName is the name of the ServiceAccount to use to run gateway pod.
  // More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  // +optional
  optional string serviceAccountName = 2 [(gogoproto.customname) = "ServiceAccountName", (gogoproto.nullable) = false];

  // Container is the main container image to run in the gateway pod
  // +optional
  optional k8s.io.api.core.v1.Container container = 3 [(gogoproto.customname) = "Container"];

  // Volumes is a list of volumes that can be mounted by containers in a workflow.
  // +patchStrategy=merge
  // +patchMergeKey=name
  // +optional
  repeated k8s.io.api.core.v1.Volume volumes = 4 [(gogoproto.customname) = "Volumes", (gogoproto.nullable) = false];

  // SecurityContext holds pod-level security attributes and common container settings.
  // Optional: Defaults to empty.  See type description for default values of each field.
  // +optional
  optional k8s.io.api.core.v1.PodSecurityContext securityContext = 5 [(gogoproto.customname) = "SecurityContext"];

  // If specified, the pod's scheduling constraints
  // +optional
  optional k8s.io.api.core.v1.Affinity affinity = 6 [(gogoproto.customname) = "Affinity"];

  // If specified, the pod's tolerations.
  // +optional
  repeated k8s.io.api.core.v1.Toleration tolerations = 7 [(gogoproto.customname) = "Tolerations", (gogoproto.nullable) = false];

  // Spec holds the gateway deployment spec.
  // DEPRECATED: Use Container instead.
  optional k8s.io.api.core.v1.PodSpec spec = 8 [(gogoproto.customname) = "Spec"];
}

